import React from 'react';
import { motion } from 'framer-motion';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import * as FiIcons from 'react-icons/fi';
import SafeIcon from '../common/SafeIcon';

const { FiDownload, FiPrinter, FiImage } = FiIcons;

const WorksheetExport = ({ selectedQRData, worksheetTitle = 'QR Code Worksheet' }) => {
  const createPageContent = (qrData, pageNumber, totalPages) => {
    return `
      <div style="text-align: center; margin-bottom: 80px;">
        <h1 style="font-size: 80px; font-weight: bold; color: #1f2937; margin-bottom: 30px; font-family: Arial, sans-serif;">${worksheetTitle}</h1>
        <p style="font-size: 40px; color: #6b7280; font-family: Arial, sans-serif;">Scan the QR codes below to access the links</p>
      </div>
      <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 80px; justify-items: center; justify-content: center; margin-bottom: 80px;">
        ${qrData.map(qr => `
          <div style="width: 100%; max-width: 600px; text-align: center;">
            <div style="background: #f3f4f6; padding: 40px; border-radius: 20px; border: 3px solid #e5e7eb; margin-bottom: 30px;">
              <img src="https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr.url)}&size=600x600" 
                   alt="QR Code for ${qr.title}" 
                   style="width: 520px; height: 520px; object-fit: contain;">
            </div>
            <h3 style="font-size: 32px; font-weight: bold; color: #1f2937; word-wrap: break-word; font-family: Arial, sans-serif; line-height: 1.3; margin: 0;">
              ${qr.title}
            </h3>
          </div>
        `).join('')}
      </div>
      <div style="margin-top: auto; display: flex; justify-content: space-between; align-items: center;">
        <p style="font-size: 24px; color: #9ca3af; font-family: Arial, sans-serif;">Generated by QRIOS - QR Code Generator & Worksheet Builder</p>
        <p style="font-size: 24px; color: #9ca3af; font-family: Arial, sans-serif;">Page ${pageNumber} of ${totalPages}</p>
      </div>
    `;
  };

  const handleDownloadPDF = async () => {
    const qrCodesPerPage = 12;
    const totalPages = Math.ceil(selectedQRData.length / qrCodesPerPage);
    
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'px',
      format: [2480, 3508],
    });

    for (let page = 0; page < totalPages; page++) {
      const startIndex = page * qrCodesPerPage;
      const endIndex = Math.min(startIndex + qrCodesPerPage, selectedQRData.length);
      const pageQRData = selectedQRData.slice(startIndex, endIndex);

      const tempElement = document.createElement('div');
      tempElement.style.position = 'absolute';
      tempElement.style.left = '-9999px';
      tempElement.style.top = '-9999px';
      tempElement.style.width = '2480px';
      tempElement.style.height = '3508px';
      tempElement.style.backgroundColor = 'white';
      tempElement.style.padding = '120px';
      tempElement.style.boxSizing = 'border-box';
      tempElement.style.display = 'flex';
      tempElement.style.flexDirection = 'column';
      
      tempElement.innerHTML = createPageContent(pageQRData, page + 1, totalPages);
      
      document.body.appendChild(tempElement);
      
      try {
        const canvas = await html2canvas(tempElement, {
          width: 2480,
          height: 3508,
          scale: 1,
          useCORS: true,
          allowTaint: true,
          backgroundColor: '#ffffff',
          logging: false,
        });

        const imgData = canvas.toDataURL('image/png');
        
        if (page > 0) {
          pdf.addPage();
        }
        
        pdf.addImage(imgData, 'PNG', 0, 0, 2480, 3508);
      } finally {
        document.body.removeChild(tempElement);
      }
    }

    pdf.save(`${worksheetTitle.replace(/[^a-zA-Z0-9]/g, '-')}.pdf`);
  };

  const handleDownloadImage = async () => {
    const qrCodesPerPage = 12;
    const totalPages = Math.ceil(selectedQRData.length / qrCodesPerPage);
    
    for (let page = 0; page < totalPages; page++) {
      const startIndex = page * qrCodesPerPage;
      const endIndex = Math.min(startIndex + qrCodesPerPage, selectedQRData.length);
      const pageQRData = selectedQRData.slice(startIndex, endIndex);

      const tempElement = document.createElement('div');
      tempElement.style.position = 'absolute';
      tempElement.style.left = '-9999px';
      tempElement.style.top = '-9999px';
      tempElement.style.width = '2480px';
      tempElement.style.height = '3508px';
      tempElement.style.backgroundColor = 'white';
      tempElement.style.padding = '120px';
      tempElement.style.boxSizing = 'border-box';
      tempElement.style.display = 'flex';
      tempElement.style.flexDirection = 'column';
      
      tempElement.innerHTML = createPageContent(pageQRData, page + 1, totalPages);
      
      document.body.appendChild(tempElement);
      
      try {
        const canvas = await html2canvas(tempElement, {
          width: 2480,
          height: 3508,
          scale: 1,
          useCORS: true,
          allowTaint: true,
          backgroundColor: '#ffffff',
          logging: false,
        });

        const link = document.createElement('a');
        const filename = totalPages > 1 
          ? `${worksheetTitle.replace(/[^a-zA-Z0-9]/g, '-')}-page-${page + 1}.png`
          : `${worksheetTitle.replace(/[^a-zA-Z0-9]/g, '-')}.png`;
        
        link.download = filename;
        link.href = canvas.toDataURL('image/png');
        link.click();
      } finally {
        document.body.removeChild(tempElement);
      }
    }
  };

  const handlePrint = () => {
    const qrCodesPerPage = 12;
    const totalPages = Math.ceil(selectedQRData.length / qrCodesPerPage);
    
    const printWindow = window.open('', '_blank');
    let printContent = `
      <html>
        <head>
          <title>${worksheetTitle}</title>
          <style>
            @page { size: A4; margin: 15mm; }
            body { font-family: Arial, sans-serif; margin: 0; }
            .page { page-break-after: always; min-height: 100vh; display: flex; flex-direction: column; }
            .page:last-child { page-break-after: avoid; }
            .header { text-align: center; margin-bottom: 30px; }
            .header h1 { font-size: 28px; margin-bottom: 10px; color: #1f2937; }
            .header p { font-size: 16px; color: #6b7280; }
            .grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; justify-items: center; flex-grow: 1; }
            .qr-item { width: 100%; max-width: 180px; text-align: center; }
            .qr-image { background: #f3f4f6; padding: 12px; border-radius: 8px; border: 1px solid #e5e7eb; margin-bottom: 8px; }
            .qr-image img { width: 100%; height: 120px; object-fit: contain; }
            .qr-title { font-size: 11px; font-weight: bold; color: #1f2937; word-wrap: break-word; line-height: 1.3; }
            .footer { display: flex; justify-content: space-between; align-items: center; margin-top: auto; padding-top: 20px; font-size: 10px; color: #9ca3af; }
          </style>
        </head>
        <body>
    `;
    
    for (let page = 0; page < totalPages; page++) {
      const startIndex = page * qrCodesPerPage;
      const endIndex = Math.min(startIndex + qrCodesPerPage, selectedQRData.length);
      const pageQRData = selectedQRData.slice(startIndex, endIndex);
      
      printContent += `
        <div class="page">
          <div class="header">
            <h1>${worksheetTitle}</h1>
            <p>Scan the QR codes below to access the links</p>
          </div>
          <div class="grid">
            ${pageQRData.map(qr => `
              <div class="qr-item">
                <div class="qr-image">
                  <img src="https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr.url)}&size=200x200" alt="QR Code for ${qr.title}">
                </div>
                <div class="qr-title">${qr.title}</div>
              </div>
            `).join('')}
          </div>
          <div class="footer">
            <p>Generated by QRIOS - QR Code Generator & Worksheet Builder</p>
            <p>Page ${page + 1} of ${totalPages}</p>
          </div>
        </div>
      `;
    }
    
    printContent += `
        </body>
      </html>
    `;
    
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <div className="flex gap-3">
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={handleDownloadPDF}
        className="flex items-center gap-2 px-4 py-2 bg-blue-gradient text-white rounded-lg shadow-electric hover:shadow-electric-strong transition-all"
      >
        <SafeIcon icon={FiDownload} className="w-4 h-4" />
        Download PDF
      </motion.button>

      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={handleDownloadImage}
        className="flex items-center gap-2 px-4 py-2 bg-blue-gradient text-white rounded-lg transition-all"
      >
        <SafeIcon icon={FiImage} className="w-4 h-4" />
        Download PNG
      </motion.button>

      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={handlePrint}
        className="flex items-center gap-2 px-4 py-2 bg-blue-gradient text-white rounded-lg transition-all"
      >
        <SafeIcon icon={FiPrinter} className="w-4 h-4" />
        Print
      </motion.button>
    </div>
  );
};

export default WorksheetExport;